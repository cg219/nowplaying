// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
)

const activateMusicSession = `-- name: ActivateMusicSession :exec
UPDATE music_sessions
SET active = 1
WHERE id = ?
`

func (q *Queries) ActivateMusicSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, activateMusicSession, id)
	return err
}

const deactivateMusicSession = `-- name: DeactivateMusicSession :exec
UPDATE music_sessions
SET active = 0
WHERE id = ?
`

func (q *Queries) DeactivateMusicSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateMusicSession, id)
	return err
}

const getActiveMusicSessions = `-- name: GetActiveMusicSessions :many
SELECT id, data, type, active
FROM music_sessions
WHERE active = 1
`

type GetActiveMusicSessionsRow struct {
	ID     int64
	Data   string
	Type   string
	Active int64
}

func (q *Queries) GetActiveMusicSessions(ctx context.Context) ([]GetActiveMusicSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveMusicSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveMusicSessionsRow
	for rows.Next() {
		var i GetActiveMusicSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Data,
			&i.Type,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastFMSession = `-- name: GetLastFMSession :one
SELECT lastfm_session_name, lastfm_session_key
FROM users
WHERE username = ?
`

type GetLastFMSessionRow struct {
	LastfmSessionName sql.NullString
	LastfmSessionKey  sql.NullString
}

func (q *Queries) GetLastFMSession(ctx context.Context, username string) (GetLastFMSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getLastFMSession, username)
	var i GetLastFMSessionRow
	err := row.Scan(&i.LastfmSessionName, &i.LastfmSessionKey)
	return i, err
}

const getSpotifySession = `-- name: GetSpotifySession :one
SELECT spotify_access_token, spotify_refresh_token, spotify_auth_state
FROM users
WHERE username = ?
`

type GetSpotifySessionRow struct {
	SpotifyAccessToken  sql.NullString
	SpotifyRefreshToken sql.NullString
	SpotifyAuthState    sql.NullString
}

func (q *Queries) GetSpotifySession(ctx context.Context, username string) (GetSpotifySessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSpotifySession, username)
	var i GetSpotifySessionRow
	err := row.Scan(&i.SpotifyAccessToken, &i.SpotifyRefreshToken, &i.SpotifyAuthState)
	return i, err
}

const getTwitterSession = `-- name: GetTwitterSession :one
SELECT twitter_request_token, twitter_request_secret, twitter_oauth_token, twitter_oauth_secret
FROM users
WHERE username = ?
`

type GetTwitterSessionRow struct {
	TwitterRequestToken  sql.NullString
	TwitterRequestSecret sql.NullString
	TwitterOauthToken    sql.NullString
	TwitterOauthSecret   sql.NullString
}

func (q *Queries) GetTwitterSession(ctx context.Context, username string) (GetTwitterSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getTwitterSession, username)
	var i GetTwitterSessionRow
	err := row.Scan(
		&i.TwitterRequestToken,
		&i.TwitterRequestSecret,
		&i.TwitterOauthToken,
		&i.TwitterOauthSecret,
	)
	return i, err
}

const getTwitterSessionByRequestToken = `-- name: GetTwitterSessionByRequestToken :one
SELECT twitter_request_token, twitter_request_secret, twitter_oauth_token, twitter_oauth_secret, username
FROM users
WHERE twitter_request_token = ?
`

type GetTwitterSessionByRequestTokenRow struct {
	TwitterRequestToken  sql.NullString
	TwitterRequestSecret sql.NullString
	TwitterOauthToken    sql.NullString
	TwitterOauthSecret   sql.NullString
	Username             string
}

func (q *Queries) GetTwitterSessionByRequestToken(ctx context.Context, twitterRequestToken sql.NullString) (GetTwitterSessionByRequestTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getTwitterSessionByRequestToken, twitterRequestToken)
	var i GetTwitterSessionByRequestTokenRow
	err := row.Scan(
		&i.TwitterRequestToken,
		&i.TwitterRequestSecret,
		&i.TwitterOauthToken,
		&i.TwitterOauthSecret,
		&i.Username,
	)
	return i, err
}

const getUserMusicSessions = `-- name: GetUserMusicSessions :many
SELECT id, data, type, active
FROM music_sessions
WHERE uid = ?
`

type GetUserMusicSessionsRow struct {
	ID     int64
	Data   string
	Type   string
	Active int64
}

func (q *Queries) GetUserMusicSessions(ctx context.Context, uid int64) ([]GetUserMusicSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserMusicSessions, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserMusicSessionsRow
	for rows.Next() {
		var i GetUserMusicSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Data,
			&i.Type,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSession = `-- name: GetUserSession :one
SELECT accessToken, refreshToken, valid
FROM sessions
WHERE accessToken = ? AND refreshToken = ?
LIMIT 1
`

type GetUserSessionParams struct {
	Accesstoken  string
	Refreshtoken string
}

func (q *Queries) GetUserSession(ctx context.Context, arg GetUserSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getUserSession, arg.Accesstoken, arg.Refreshtoken)
	var i Session
	err := row.Scan(&i.Accesstoken, &i.Refreshtoken, &i.Valid)
	return i, err
}

const invalidateUserSession = `-- name: InvalidateUserSession :exec
UPDATE sessions
SET valid = 0
WHERE accessToken = ? AND refreshToken = ?
`

type InvalidateUserSessionParams struct {
	Accesstoken  string
	Refreshtoken string
}

func (q *Queries) InvalidateUserSession(ctx context.Context, arg InvalidateUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, invalidateUserSession, arg.Accesstoken, arg.Refreshtoken)
	return err
}

const removeInactiveMusicSessions = `-- name: RemoveInactiveMusicSessions :exec
DELETE FROM music_sessions
WHERE active = 0
`

func (q *Queries) RemoveInactiveMusicSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeInactiveMusicSessions)
	return err
}

const saveLastFMSession = `-- name: SaveLastFMSession :exec
UPDATE users
SET lastfm_session_name = ?,
    lastfm_session_key = ?
WHERE username = ?
`

type SaveLastFMSessionParams struct {
	LastfmSessionName sql.NullString
	LastfmSessionKey  sql.NullString
	Username          string
}

func (q *Queries) SaveLastFMSession(ctx context.Context, arg SaveLastFMSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveLastFMSession, arg.LastfmSessionName, arg.LastfmSessionKey, arg.Username)
	return err
}

const saveMusicSession = `-- name: SaveMusicSession :exec
INSERT INTO music_sessions(data, type, active, uid)
VALUES(?, ?, ?, ?)
`

type SaveMusicSessionParams struct {
	Data   string
	Type   string
	Active int64
	Uid    int64
}

func (q *Queries) SaveMusicSession(ctx context.Context, arg SaveMusicSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveMusicSession,
		arg.Data,
		arg.Type,
		arg.Active,
		arg.Uid,
	)
	return err
}

const saveSpotifySession = `-- name: SaveSpotifySession :exec
UPDATE users
SET spotify_access_token = ?,
    spotify_refresh_token = ?,
    spotify_auth_state = ?
WHERE username = ?
`

type SaveSpotifySessionParams struct {
	SpotifyAccessToken  sql.NullString
	SpotifyRefreshToken sql.NullString
	SpotifyAuthState    sql.NullString
	Username            string
}

func (q *Queries) SaveSpotifySession(ctx context.Context, arg SaveSpotifySessionParams) error {
	_, err := q.db.ExecContext(ctx, saveSpotifySession,
		arg.SpotifyAccessToken,
		arg.SpotifyRefreshToken,
		arg.SpotifyAuthState,
		arg.Username,
	)
	return err
}

const saveTwitterSession = `-- name: SaveTwitterSession :exec
UPDATE users
SET twitter_request_token = ?,
    twitter_request_secret = ?,
    twitter_oauth_token = ?,
    twitter_oauth_secret = ?
WHERE username = ?
`

type SaveTwitterSessionParams struct {
	TwitterRequestToken  sql.NullString
	TwitterRequestSecret sql.NullString
	TwitterOauthToken    sql.NullString
	TwitterOauthSecret   sql.NullString
	Username             string
}

func (q *Queries) SaveTwitterSession(ctx context.Context, arg SaveTwitterSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveTwitterSession,
		arg.TwitterRequestToken,
		arg.TwitterRequestSecret,
		arg.TwitterOauthToken,
		arg.TwitterOauthSecret,
		arg.Username,
	)
	return err
}

const saveUserSession = `-- name: SaveUserSession :exec
INSERT INTO sessions(accessToken, refreshToken)
VALUES(?, ?)
`

type SaveUserSessionParams struct {
	Accesstoken  string
	Refreshtoken string
}

func (q *Queries) SaveUserSession(ctx context.Context, arg SaveUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveUserSession, arg.Accesstoken, arg.Refreshtoken)
	return err
}

const updateSpotifyAccessToken = `-- name: UpdateSpotifyAccessToken :exec
UPDATE users
SET spotify_access_token = ?
WHERE username = ?
`

type UpdateSpotifyAccessTokenParams struct {
	SpotifyAccessToken sql.NullString
	Username           string
}

func (q *Queries) UpdateSpotifyAccessToken(ctx context.Context, arg UpdateSpotifyAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateSpotifyAccessToken, arg.SpotifyAccessToken, arg.Username)
	return err
}
