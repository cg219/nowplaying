// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scrobble.sql

package database

import (
	"context"
	"database/sql"
)

const getLatestTrack = `-- name: GetLatestTrack :one
SELECT artist_name, track_name, timestamp, duration
FROM scrobbles
WHERE uid = ?
ORDER BY timestamp DESC
LIMIT 1
`

type GetLatestTrackRow struct {
	ArtistName string
	TrackName  string
	Timestamp  int64
	Duration   int64
}

func (q *Queries) GetLatestTrack(ctx context.Context, uid int64) (GetLatestTrackRow, error) {
	row := q.db.QueryRowContext(ctx, getLatestTrack, uid)
	var i GetLatestTrackRow
	err := row.Scan(
		&i.ArtistName,
		&i.TrackName,
		&i.Timestamp,
		&i.Duration,
	)
	return i, err
}

const getRecentScrobbles = `-- name: GetRecentScrobbles :many
SELECT artist_name, track_name, timestamp, duration
FROM scrobbles
WHERE uid = ?
ORDER BY timestamp DESC
LIMIT 5
`

type GetRecentScrobblesRow struct {
	ArtistName string
	TrackName  string
	Timestamp  int64
	Duration   int64
}

func (q *Queries) GetRecentScrobbles(ctx context.Context, uid int64) ([]GetRecentScrobblesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentScrobbles, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentScrobblesRow
	for rows.Next() {
		var i GetRecentScrobblesRow
		if err := rows.Scan(
			&i.ArtistName,
			&i.TrackName,
			&i.Timestamp,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeScrobble = `-- name: RemoveScrobble :exec
DELETE FROM scrobbles
WHERE id = ?
`

func (q *Queries) RemoveScrobble(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, removeScrobble, id)
	return err
}

const saveScrobble = `-- name: SaveScrobble :exec
INSERT INTO scrobbles(artist_name, track_name, album_name, album_artist, mbid, track_number, duration, timestamp, source, uid)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SaveScrobbleParams struct {
	ArtistName  string
	TrackName   string
	AlbumName   sql.NullString
	AlbumArtist sql.NullString
	Mbid        sql.NullString
	TrackNumber sql.NullString
	Duration    int64
	Timestamp   int64
	Source      sql.NullString
	Uid         int64
}

func (q *Queries) SaveScrobble(ctx context.Context, arg SaveScrobbleParams) error {
	_, err := q.db.ExecContext(ctx, saveScrobble,
		arg.ArtistName,
		arg.TrackName,
		arg.AlbumName,
		arg.AlbumArtist,
		arg.Mbid,
		arg.TrackNumber,
		arg.Duration,
		arg.Timestamp,
		arg.Source,
		arg.Uid,
	)
	return err
}
