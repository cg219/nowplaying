// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scrobble.sql

package database

import (
	"context"
	"database/sql"
)

const getLatestTrack = `-- name: GetLatestTrack :one
SELECT artist_name, track_name, timestamp, duration
FROM scrobbles
WHERE uid = ?
ORDER BY timestamp DESC
LIMIT 1
`

type GetLatestTrackRow struct {
	ArtistName string
	TrackName  string
	Timestamp  int64
	Duration   int64
}

func (q *Queries) GetLatestTrack(ctx context.Context, uid int64) (GetLatestTrackRow, error) {
	row := q.db.QueryRowContext(ctx, getLatestTrack, uid)
	var i GetLatestTrackRow
	err := row.Scan(
		&i.ArtistName,
		&i.TrackName,
		&i.Timestamp,
		&i.Duration,
	)
	return i, err
}

const getRecentScrobbles = `-- name: GetRecentScrobbles :many
SELECT artist_name, track_name, timestamp, duration
FROM scrobbles
WHERE uid = ?
ORDER BY timestamp DESC
LIMIT 5
`

type GetRecentScrobblesRow struct {
	ArtistName string
	TrackName  string
	Timestamp  int64
	Duration   int64
}

func (q *Queries) GetRecentScrobbles(ctx context.Context, uid int64) ([]GetRecentScrobblesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentScrobbles, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentScrobblesRow
	for rows.Next() {
		var i GetRecentScrobblesRow
		if err := rows.Scan(
			&i.ArtistName,
			&i.TrackName,
			&i.Timestamp,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopAlbumsOfDay = `-- name: GetTopAlbumsOfDay :many
SELECT album_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND album_name IS NOT "Unknown" AND album_name IS NOT NULL AND album_name IS NOT "" AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*1))
GROUP BY album_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopAlbumsOfDayParams struct {
	Uid   int64
	Limit int64
}

type GetTopAlbumsOfDayRow struct {
	AlbumName  sql.NullString
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopAlbumsOfDay(ctx context.Context, arg GetTopAlbumsOfDayParams) ([]GetTopAlbumsOfDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopAlbumsOfDay, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopAlbumsOfDayRow
	for rows.Next() {
		var i GetTopAlbumsOfDayRow
		if err := rows.Scan(&i.AlbumName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopAlbumsOfMonth = `-- name: GetTopAlbumsOfMonth :many
SELECT album_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND album_name IS NOT "Unknown" AND album_name IS NOT NULL AND album_name IS NOT "" AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*30))
GROUP BY album_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopAlbumsOfMonthParams struct {
	Uid   int64
	Limit int64
}

type GetTopAlbumsOfMonthRow struct {
	AlbumName  sql.NullString
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopAlbumsOfMonth(ctx context.Context, arg GetTopAlbumsOfMonthParams) ([]GetTopAlbumsOfMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopAlbumsOfMonth, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopAlbumsOfMonthRow
	for rows.Next() {
		var i GetTopAlbumsOfMonthRow
		if err := rows.Scan(&i.AlbumName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopAlbumsOfWeek = `-- name: GetTopAlbumsOfWeek :many
SELECT album_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND album_name IS NOT "Unknown" AND album_name IS NOT NULL AND album_name IS NOT "" AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*7))
GROUP BY album_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopAlbumsOfWeekParams struct {
	Uid   int64
	Limit int64
}

type GetTopAlbumsOfWeekRow struct {
	AlbumName  sql.NullString
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopAlbumsOfWeek(ctx context.Context, arg GetTopAlbumsOfWeekParams) ([]GetTopAlbumsOfWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopAlbumsOfWeek, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopAlbumsOfWeekRow
	for rows.Next() {
		var i GetTopAlbumsOfWeekRow
		if err := rows.Scan(&i.AlbumName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopAlbumsOfYear = `-- name: GetTopAlbumsOfYear :many
SELECT album_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND album_name IS NOT "Unknown" AND album_name IS NOT NULL AND album_name IS NOT "" AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*365))
GROUP BY album_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopAlbumsOfYearParams struct {
	Uid   int64
	Limit int64
}

type GetTopAlbumsOfYearRow struct {
	AlbumName  sql.NullString
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopAlbumsOfYear(ctx context.Context, arg GetTopAlbumsOfYearParams) ([]GetTopAlbumsOfYearRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopAlbumsOfYear, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopAlbumsOfYearRow
	for rows.Next() {
		var i GetTopAlbumsOfYearRow
		if err := rows.Scan(&i.AlbumName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopArtistsOfDay = `-- name: GetTopArtistsOfDay :many
With splits as (
  SELECT trim(value) as artist
  FROM scrobbles, json_each('["' || replace(artist_name, ',', '","') || '"]')
  WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*1))
)
SELECT artist, count(*) as plays
FROM splits
group by artist
order by plays DESC
limit ?
`

type GetTopArtistsOfDayParams struct {
	Uid   int64
	Limit int64
}

type GetTopArtistsOfDayRow struct {
	Artist string
	Plays  int64
}

func (q *Queries) GetTopArtistsOfDay(ctx context.Context, arg GetTopArtistsOfDayParams) ([]GetTopArtistsOfDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopArtistsOfDay, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopArtistsOfDayRow
	for rows.Next() {
		var i GetTopArtistsOfDayRow
		if err := rows.Scan(&i.Artist, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopArtistsOfMonth = `-- name: GetTopArtistsOfMonth :many
With splits as (
  SELECT trim(value) as artist
  FROM scrobbles, json_each('["' || replace(artist_name, ',', '","') || '"]')
  WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*30))
)
SELECT artist, count(*) as plays
FROM splits
group by artist
order by plays DESC
limit ?
`

type GetTopArtistsOfMonthParams struct {
	Uid   int64
	Limit int64
}

type GetTopArtistsOfMonthRow struct {
	Artist string
	Plays  int64
}

func (q *Queries) GetTopArtistsOfMonth(ctx context.Context, arg GetTopArtistsOfMonthParams) ([]GetTopArtistsOfMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopArtistsOfMonth, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopArtistsOfMonthRow
	for rows.Next() {
		var i GetTopArtistsOfMonthRow
		if err := rows.Scan(&i.Artist, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopArtistsOfWeek = `-- name: GetTopArtistsOfWeek :many
With splits as (
  SELECT trim(value) as artist
  FROM scrobbles, json_each('["' || replace(artist_name, ',', '","') || '"]')
  WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*7))
)
SELECT artist, count(*) as plays
FROM splits
group by artist
order by plays DESC
limit ?
`

type GetTopArtistsOfWeekParams struct {
	Uid   int64
	Limit int64
}

type GetTopArtistsOfWeekRow struct {
	Artist string
	Plays  int64
}

func (q *Queries) GetTopArtistsOfWeek(ctx context.Context, arg GetTopArtistsOfWeekParams) ([]GetTopArtistsOfWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopArtistsOfWeek, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopArtistsOfWeekRow
	for rows.Next() {
		var i GetTopArtistsOfWeekRow
		if err := rows.Scan(&i.Artist, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopArtistsOfYear = `-- name: GetTopArtistsOfYear :many
With splits as (
  SELECT trim(value) as artist
  FROM scrobbles, json_each('["' || replace(artist_name, ',', '","') || '"]')
  WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*365))
)
SELECT artist, count(*) as plays
FROM splits
group by artist
order by plays DESC
limit ?
`

type GetTopArtistsOfYearParams struct {
	Uid   int64
	Limit int64
}

type GetTopArtistsOfYearRow struct {
	Artist string
	Plays  int64
}

func (q *Queries) GetTopArtistsOfYear(ctx context.Context, arg GetTopArtistsOfYearParams) ([]GetTopArtistsOfYearRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopArtistsOfYear, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopArtistsOfYearRow
	for rows.Next() {
		var i GetTopArtistsOfYearRow
		if err := rows.Scan(&i.Artist, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopTracksOfDay = `-- name: GetTopTracksOfDay :many
SELECT track_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*1))
GROUP BY track_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopTracksOfDayParams struct {
	Uid   int64
	Limit int64
}

type GetTopTracksOfDayRow struct {
	TrackName  string
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopTracksOfDay(ctx context.Context, arg GetTopTracksOfDayParams) ([]GetTopTracksOfDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopTracksOfDay, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopTracksOfDayRow
	for rows.Next() {
		var i GetTopTracksOfDayRow
		if err := rows.Scan(&i.TrackName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopTracksOfMonth = `-- name: GetTopTracksOfMonth :many
SELECT track_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*30))
GROUP BY track_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopTracksOfMonthParams struct {
	Uid   int64
	Limit int64
}

type GetTopTracksOfMonthRow struct {
	TrackName  string
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopTracksOfMonth(ctx context.Context, arg GetTopTracksOfMonthParams) ([]GetTopTracksOfMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopTracksOfMonth, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopTracksOfMonthRow
	for rows.Next() {
		var i GetTopTracksOfMonthRow
		if err := rows.Scan(&i.TrackName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopTracksOfWeek = `-- name: GetTopTracksOfWeek :many
SELECT track_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*7))
GROUP BY track_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopTracksOfWeekParams struct {
	Uid   int64
	Limit int64
}

type GetTopTracksOfWeekRow struct {
	TrackName  string
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopTracksOfWeek(ctx context.Context, arg GetTopTracksOfWeekParams) ([]GetTopTracksOfWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopTracksOfWeek, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopTracksOfWeekRow
	for rows.Next() {
		var i GetTopTracksOfWeekRow
		if err := rows.Scan(&i.TrackName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopTracksOfYear = `-- name: GetTopTracksOfYear :many
SELECT track_name, artist_name, count(id) as plays
FROM scrobbles
WHERE uid = ? AND (timestamp / 1000) >= (strftime("%s", "now") - (60*60*24*365))
GROUP BY track_name
ORDER BY plays DESC
LIMIT ?
`

type GetTopTracksOfYearParams struct {
	Uid   int64
	Limit int64
}

type GetTopTracksOfYearRow struct {
	TrackName  string
	ArtistName string
	Plays      int64
}

func (q *Queries) GetTopTracksOfYear(ctx context.Context, arg GetTopTracksOfYearParams) ([]GetTopTracksOfYearRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopTracksOfYear, arg.Uid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopTracksOfYearRow
	for rows.Next() {
		var i GetTopTracksOfYearRow
		if err := rows.Scan(&i.TrackName, &i.ArtistName, &i.Plays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeScrobble = `-- name: RemoveScrobble :exec
DELETE FROM scrobbles
WHERE id = ?
`

func (q *Queries) RemoveScrobble(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, removeScrobble, id)
	return err
}

const saveScrobble = `-- name: SaveScrobble :exec
INSERT INTO scrobbles(artist_name, track_name, album_name, album_artist, mbid, track_number, duration, timestamp, source, uid)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SaveScrobbleParams struct {
	ArtistName  string
	TrackName   string
	AlbumName   sql.NullString
	AlbumArtist sql.NullString
	Mbid        sql.NullString
	TrackNumber sql.NullString
	Duration    int64
	Timestamp   int64
	Source      sql.NullString
	Uid         int64
}

func (q *Queries) SaveScrobble(ctx context.Context, arg SaveScrobbleParams) error {
	_, err := q.db.ExecContext(ctx, saveScrobble,
		arg.ArtistName,
		arg.TrackName,
		arg.AlbumName,
		arg.AlbumArtist,
		arg.Mbid,
		arg.TrackNumber,
		arg.Duration,
		arg.Timestamp,
		arg.Source,
		arg.Uid,
	)
	return err
}
